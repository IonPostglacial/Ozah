// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: common_queries.sql

package commonstorage

import (
	"context"
	"database/sql"
)

const getCredentials = `-- name: GetCredentials :one
select Encryption, Password, Created_On, Last_Modified from Credentials
where Login = ?
`

type GetCredentialsRow struct {
	Encryption   string
	Password     string
	CreatedOn    sql.NullString
	LastModified sql.NullString
}

func (q *Queries) GetCredentials(ctx context.Context, login string) (GetCredentialsRow, error) {
	row := q.db.QueryRowContext(ctx, getCredentials, login)
	var i GetCredentialsRow
	err := row.Scan(
		&i.Encryption,
		&i.Password,
		&i.CreatedOn,
		&i.LastModified,
	)
	return i, err
}

const insertCredentials = `-- name: InsertCredentials :execresult
insert into Credentials (Login, Encryption, Password)
values (?, ?, ?)
`

type InsertCredentialsParams struct {
	Login      string
	Encryption string
	Password   string
}

func (q *Queries) InsertCredentials(ctx context.Context, arg InsertCredentialsParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertCredentials, arg.Login, arg.Encryption, arg.Password)
}
