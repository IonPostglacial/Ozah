// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package appdb

import (
	"context"
	"database/sql"
)

const deleteCredentials = `-- name: DeleteCredentials :execresult
delete from Credentials
where
    Login = ?
`

func (q *Queries) DeleteCredentials(ctx context.Context, login string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteCredentials, login)
}

const deleteDatasetSharing = `-- name: DeleteDatasetSharing :execresult
delete from Dataset_Sharing
where
    Ref = ?
    and Creator_User_Login = ?
`

type DeleteDatasetSharingParams struct {
	Ref              string
	CreatorUserLogin string
}

func (q *Queries) DeleteDatasetSharing(ctx context.Context, arg DeleteDatasetSharingParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteDatasetSharing, arg.Ref, arg.CreatorUserLogin)
}

const deleteDatasetSharingUser = `-- name: DeleteDatasetSharingUser :execresult
delete from Dataset_Sharing_Users
where
    Dataset_Ref = ?
    and User_Login = ?
`

type DeleteDatasetSharingUserParams struct {
	DatasetRef string
	UserLogin  string
}

func (q *Queries) DeleteDatasetSharingUser(ctx context.Context, arg DeleteDatasetSharingUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteDatasetSharingUser, arg.DatasetRef, arg.UserLogin)
}

const deleteUserHiddenPanels = `-- name: DeleteUserHiddenPanels :execresult
delete from User_Hidden_Panel
where
    User_Login = ? and Panel_Id = ?
`

type DeleteUserHiddenPanelsParams struct {
	UserLogin string
	PanelID   int64
}

func (q *Queries) DeleteUserHiddenPanels(ctx context.Context, arg DeleteUserHiddenPanelsParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUserHiddenPanels, arg.UserLogin, arg.PanelID)
}

const deleteUserSelectedLanguage = `-- name: DeleteUserSelectedLanguage :execresult
delete from User_Selected_Lang
where
    User_Login = ?
    and Lang_Ref = ?
`

type DeleteUserSelectedLanguageParams struct {
	UserLogin string
	LangRef   string
}

func (q *Queries) DeleteUserSelectedLanguage(ctx context.Context, arg DeleteUserSelectedLanguageParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUserSelectedLanguage, arg.UserLogin, arg.LangRef)
}

const deleteUserSessions = `-- name: DeleteUserSessions :execresult
delete from Session
where
    Login = ?
`

func (q *Queries) DeleteUserSessions(ctx context.Context, login string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUserSessions, login)
}

const getAllLangs = `-- name: GetAllLangs :execresult
select ref, name from Lang
`

func (q *Queries) GetAllLangs(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, getAllLangs)
}

const getCredentials = `-- name: GetCredentials :one
select
    Encryption,
    Password,
    Created_On,
    Last_Modified
from
    Credentials
where
    Login = ?
`

type GetCredentialsRow struct {
	Encryption   string
	Password     string
	CreatedOn    sql.NullString
	LastModified sql.NullString
}

func (q *Queries) GetCredentials(ctx context.Context, login string) (GetCredentialsRow, error) {
	row := q.db.QueryRowContext(ctx, getCredentials, login)
	var i GetCredentialsRow
	err := row.Scan(
		&i.Encryption,
		&i.Password,
		&i.CreatedOn,
		&i.LastModified,
	)
	return i, err
}

const getDatasetSharing = `-- name: GetDatasetSharing :many
select
    Ref,
    Creator_User_Login,
    Creation_Date,
    Name,
    Details
from
    Dataset_Sharing
where
    Creator_User_Login = ?
`

func (q *Queries) GetDatasetSharing(ctx context.Context, creatorUserLogin string) ([]DatasetSharing, error) {
	rows, err := q.db.QueryContext(ctx, getDatasetSharing, creatorUserLogin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DatasetSharing
	for rows.Next() {
		var i DatasetSharing
		if err := rows.Scan(
			&i.Ref,
			&i.CreatorUserLogin,
			&i.CreationDate,
			&i.Name,
			&i.Details,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDatasetSharingUser = `-- name: GetDatasetSharingUser :one
select
    User_Login,
    Mode
from
    Dataset_Sharing_Users
where
    Dataset_Ref = ?
    and User_Login = ?
`

type GetDatasetSharingUserParams struct {
	DatasetRef string
	UserLogin  string
}

type GetDatasetSharingUserRow struct {
	UserLogin string
	Mode      string
}

func (q *Queries) GetDatasetSharingUser(ctx context.Context, arg GetDatasetSharingUserParams) (GetDatasetSharingUserRow, error) {
	row := q.db.QueryRowContext(ctx, getDatasetSharingUser, arg.DatasetRef, arg.UserLogin)
	var i GetDatasetSharingUserRow
	err := row.Scan(&i.UserLogin, &i.Mode)
	return i, err
}

const getDatasetSharingUsers = `-- name: GetDatasetSharingUsers :many
select
    User_Login,
    Mode
from
    Dataset_Sharing_Users
where
    Dataset_Ref = ?
    and Dataset_Creator_Login = ?
`

type GetDatasetSharingUsersParams struct {
	DatasetRef          string
	DatasetCreatorLogin string
}

type GetDatasetSharingUsersRow struct {
	UserLogin string
	Mode      string
}

func (q *Queries) GetDatasetSharingUsers(ctx context.Context, arg GetDatasetSharingUsersParams) ([]GetDatasetSharingUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getDatasetSharingUsers, arg.DatasetRef, arg.DatasetCreatorLogin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDatasetSharingUsersRow
	for rows.Next() {
		var i GetDatasetSharingUsersRow
		if err := rows.Scan(&i.UserLogin, &i.Mode); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLangSelectionForUser = `-- name: GetLangSelectionForUser :many
select 
    Ref, Name, not Lang_Ref is null as Selected
from Lang 
left join User_Selected_Lang on Ref = Lang_Ref
where 
    Lang_Ref is null or User_Login = ?
`

type GetLangSelectionForUserRow struct {
	Ref      string
	Name     string
	Selected bool
}

func (q *Queries) GetLangSelectionForUser(ctx context.Context, userLogin string) ([]GetLangSelectionForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getLangSelectionForUser, userLogin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLangSelectionForUserRow
	for rows.Next() {
		var i GetLangSelectionForUserRow
		if err := rows.Scan(&i.Ref, &i.Name, &i.Selected); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReadableDatasetSharedWithUser = `-- name: GetReadableDatasetSharedWithUser :many
select
    ds.Ref,
    ds.Creator_User_Login,
    ds.Creation_Date,
    ds.Name,
    ds.Details,
    uc.Private_Directory
from
    Dataset_Sharing as ds
inner join
    Dataset_Sharing_Users as dsu on ds.Ref = dsu.Dataset_Ref
inner join
    User_Configuration as uc on ds.Creator_User_Login = uc.Login    
where
    dsu.User_Login = ?
    and dsu.Mode = 'read'
`

type GetReadableDatasetSharedWithUserRow struct {
	Ref              string
	CreatorUserLogin string
	CreationDate     string
	Name             string
	Details          sql.NullString
	PrivateDirectory string
}

func (q *Queries) GetReadableDatasetSharedWithUser(ctx context.Context, userLogin string) ([]GetReadableDatasetSharedWithUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getReadableDatasetSharedWithUser, userLogin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReadableDatasetSharedWithUserRow
	for rows.Next() {
		var i GetReadableDatasetSharedWithUserRow
		if err := rows.Scan(
			&i.Ref,
			&i.CreatorUserLogin,
			&i.CreationDate,
			&i.Name,
			&i.Details,
			&i.PrivateDirectory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSession = `-- name: GetSession :one
select
    Login,
    Expiry_Date
from
    Session
where
    Token = ?
`

type GetSessionRow struct {
	Login      string
	ExpiryDate string
}

func (q *Queries) GetSession(ctx context.Context, token string) (GetSessionRow, error) {
	row := q.db.QueryRowContext(ctx, getSession, token)
	var i GetSessionRow
	err := row.Scan(&i.Login, &i.ExpiryDate)
	return i, err
}

const getUserConfiguration = `-- name: GetUserConfiguration :one
select
    login, private_directory
from
    User_Configuration
where
    Login = ?
`

func (q *Queries) GetUserConfiguration(ctx context.Context, login string) (UserConfiguration, error) {
	row := q.db.QueryRowContext(ctx, getUserConfiguration, login)
	var i UserConfiguration
	err := row.Scan(&i.Login, &i.PrivateDirectory)
	return i, err
}

const getUserHiddenPanels = `-- name: GetUserHiddenPanels :many
select
    Panel_Id
from
    User_Hidden_Panel
where
    User_Login = ?
`

func (q *Queries) GetUserHiddenPanels(ctx context.Context, userLogin string) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getUserHiddenPanels, userLogin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var panel_id int64
		if err := rows.Scan(&panel_id); err != nil {
			return nil, err
		}
		items = append(items, panel_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserSelectedLanguages = `-- name: GetUserSelectedLanguages :many
select lang.ref, lang.name from Lang as lang
inner join User_Selected_Lang as selectedLang
on (lang.Ref = selectedLang.Lang_Ref)
where     
    selectedLang.User_Login = ?
`

func (q *Queries) GetUserSelectedLanguages(ctx context.Context, userLogin string) ([]Lang, error) {
	rows, err := q.db.QueryContext(ctx, getUserSelectedLanguages, userLogin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lang
	for rows.Next() {
		var i Lang
		if err := rows.Scan(&i.Ref, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWritableDatasetSharedWithUser = `-- name: GetWritableDatasetSharedWithUser :many
select
    ds.Ref,
    ds.Creator_User_Login,
    ds.Creation_Date,
    ds.Name,
    ds.Details,
    uc.Private_Directory
from
    Dataset_Sharing as ds
inner join
    Dataset_Sharing_Users as dsu on ds.Ref = dsu.Dataset_Ref
inner join
    User_Configuration as uc on ds.Creator_User_Login = uc.Login
where
    dsu.User_Login = ?
    and dsu.Mode = 'write'
`

type GetWritableDatasetSharedWithUserRow struct {
	Ref              string
	CreatorUserLogin string
	CreationDate     string
	Name             string
	Details          sql.NullString
	PrivateDirectory string
}

func (q *Queries) GetWritableDatasetSharedWithUser(ctx context.Context, userLogin string) ([]GetWritableDatasetSharedWithUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getWritableDatasetSharedWithUser, userLogin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWritableDatasetSharedWithUserRow
	for rows.Next() {
		var i GetWritableDatasetSharedWithUserRow
		if err := rows.Scan(
			&i.Ref,
			&i.CreatorUserLogin,
			&i.CreationDate,
			&i.Name,
			&i.Details,
			&i.PrivateDirectory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCredentials = `-- name: InsertCredentials :execresult
insert into
    Credentials (Login, Encryption, Password)
values
    (?, ?, ?)
`

type InsertCredentialsParams struct {
	Login      string
	Encryption string
	Password   string
}

func (q *Queries) InsertCredentials(ctx context.Context, arg InsertCredentialsParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertCredentials, arg.Login, arg.Encryption, arg.Password)
}

const insertDatasetSharing = `-- name: InsertDatasetSharing :execresult
insert into
    Dataset_Sharing (Ref, Creator_User_Login, Creation_Date, Name, Details)
values
    (?, ?, ?, ?, ?)
`

type InsertDatasetSharingParams struct {
	Ref              string
	CreatorUserLogin string
	CreationDate     string
	Name             string
	Details          sql.NullString
}

func (q *Queries) InsertDatasetSharing(ctx context.Context, arg InsertDatasetSharingParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertDatasetSharing,
		arg.Ref,
		arg.CreatorUserLogin,
		arg.CreationDate,
		arg.Name,
		arg.Details,
	)
}

const insertDatasetSharingUser = `-- name: InsertDatasetSharingUser :execresult
insert into
    Dataset_Sharing_Users (Dataset_Ref, Dataset_Creator_Login, User_Login, Mode)
values
    (?, ?, ?, ?)
`

type InsertDatasetSharingUserParams struct {
	DatasetRef          string
	DatasetCreatorLogin string
	UserLogin           string
	Mode                string
}

func (q *Queries) InsertDatasetSharingUser(ctx context.Context, arg InsertDatasetSharingUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertDatasetSharingUser,
		arg.DatasetRef,
		arg.DatasetCreatorLogin,
		arg.UserLogin,
		arg.Mode,
	)
}

const insertLang = `-- name: InsertLang :execresult
insert into
    Lang (Ref, Name)
values
    (?, ?)
`

type InsertLangParams struct {
	Ref  string
	Name string
}

func (q *Queries) InsertLang(ctx context.Context, arg InsertLangParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertLang, arg.Ref, arg.Name)
}

const insertSession = `-- name: InsertSession :execresult
insert into
    Session (Token, Login, Expiry_Date)
values
    (?, ?, ?)
`

type InsertSessionParams struct {
	Token      string
	Login      string
	ExpiryDate string
}

func (q *Queries) InsertSession(ctx context.Context, arg InsertSessionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertSession, arg.Token, arg.Login, arg.ExpiryDate)
}

const insertUserConfiguration = `-- name: InsertUserConfiguration :execresult
insert into
    User_Configuration (Login, Private_Directory)
values
    (?, ?)
`

type InsertUserConfigurationParams struct {
	Login            string
	PrivateDirectory string
}

func (q *Queries) InsertUserConfiguration(ctx context.Context, arg InsertUserConfigurationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertUserConfiguration, arg.Login, arg.PrivateDirectory)
}

const insertUserHiddenPanels = `-- name: InsertUserHiddenPanels :execresult
insert into
    User_Hidden_Panel (User_Login, Panel_Id)
values
    (?, ?)
`

type InsertUserHiddenPanelsParams struct {
	UserLogin string
	PanelID   int64
}

func (q *Queries) InsertUserHiddenPanels(ctx context.Context, arg InsertUserHiddenPanelsParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertUserHiddenPanels, arg.UserLogin, arg.PanelID)
}

const insertUserPanel = `-- name: InsertUserPanel :execresult
insert into
    Panel (Id, Name)
values
    (?, ?)
`

type InsertUserPanelParams struct {
	ID   int64
	Name string
}

func (q *Queries) InsertUserPanel(ctx context.Context, arg InsertUserPanelParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertUserPanel, arg.ID, arg.Name)
}

const insertUserSelectedLanguage = `-- name: InsertUserSelectedLanguage :execresult
insert into
    User_Selected_Lang (User_Login, Lang_Ref)
values
    (?, ?)
`

type InsertUserSelectedLanguageParams struct {
	UserLogin string
	LangRef   string
}

func (q *Queries) InsertUserSelectedLanguage(ctx context.Context, arg InsertUserSelectedLanguageParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertUserSelectedLanguage, arg.UserLogin, arg.LangRef)
}

const updateCredentials = `-- name: UpdateCredentials :execresult
update Credentials
set
    Encryption = ?,
    Password = ?,
    Last_Modified = ?
`

type UpdateCredentialsParams struct {
	Encryption   string
	Password     string
	LastModified sql.NullString
}

func (q *Queries) UpdateCredentials(ctx context.Context, arg UpdateCredentialsParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCredentials, arg.Encryption, arg.Password, arg.LastModified)
}

const updateDatasetSharing = `-- name: UpdateDatasetSharing :execresult
update Dataset_Sharing
set
    Name = ?,
    Details = ?
where
    Ref = ?
    and Creator_User_Login = ?
`

type UpdateDatasetSharingParams struct {
	Name             string
	Details          sql.NullString
	Ref              string
	CreatorUserLogin string
}

func (q *Queries) UpdateDatasetSharing(ctx context.Context, arg UpdateDatasetSharingParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateDatasetSharing,
		arg.Name,
		arg.Details,
		arg.Ref,
		arg.CreatorUserLogin,
	)
}

const updateDatasetSharingUser = `-- name: UpdateDatasetSharingUser :execresult
update Dataset_Sharing_Users
set
    Mode = ?
where
    Dataset_Ref = ?
    and Dataset_Creator_Login = ?
    and User_Login = ?
`

type UpdateDatasetSharingUserParams struct {
	Mode                string
	DatasetRef          string
	DatasetCreatorLogin string
	UserLogin           string
}

func (q *Queries) UpdateDatasetSharingUser(ctx context.Context, arg UpdateDatasetSharingUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateDatasetSharingUser,
		arg.Mode,
		arg.DatasetRef,
		arg.DatasetCreatorLogin,
		arg.UserLogin,
	)
}
