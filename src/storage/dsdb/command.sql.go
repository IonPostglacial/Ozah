// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: command.sql

package dsdb

import (
	"context"
	"database/sql"
)

const deleteBook = `-- name: DeleteBook :exec
delete from Book where Document_Ref = ?
`

func (q *Queries) DeleteBook(ctx context.Context, documentRef string) error {
	_, err := q.db.ExecContext(ctx, deleteBook, documentRef)
	return err
}

const deleteCategoricalCharacter = `-- name: DeleteCategoricalCharacter :exec
delete from Categorical_Character where Document_Ref = ?
`

func (q *Queries) DeleteCategoricalCharacter(ctx context.Context, documentRef string) error {
	_, err := q.db.ExecContext(ctx, deleteCategoricalCharacter, documentRef)
	return err
}

const deleteDescriptorVisibilityInapplicable = `-- name: DeleteDescriptorVisibilityInapplicable :exec
delete from Descriptor_Visibility_Inapplicable 
where Descriptor_Ref = ? and Inapplicable_Descriptor_Ref = ?
`

type DeleteDescriptorVisibilityInapplicableParams struct {
	DescriptorRef             string
	InapplicableDescriptorRef string
}

func (q *Queries) DeleteDescriptorVisibilityInapplicable(ctx context.Context, arg DeleteDescriptorVisibilityInapplicableParams) error {
	_, err := q.db.ExecContext(ctx, deleteDescriptorVisibilityInapplicable, arg.DescriptorRef, arg.InapplicableDescriptorRef)
	return err
}

const deleteDescriptorVisibilityRequirement = `-- name: DeleteDescriptorVisibilityRequirement :exec
delete from Descriptor_Visibility_Requirement 
where Descriptor_Ref = ? and Required_Descriptor_Ref = ?
`

type DeleteDescriptorVisibilityRequirementParams struct {
	DescriptorRef         string
	RequiredDescriptorRef string
}

func (q *Queries) DeleteDescriptorVisibilityRequirement(ctx context.Context, arg DeleteDescriptorVisibilityRequirementParams) error {
	_, err := q.db.ExecContext(ctx, deleteDescriptorVisibilityRequirement, arg.DescriptorRef, arg.RequiredDescriptorRef)
	return err
}

const deleteDocument = `-- name: DeleteDocument :exec

delete from Document where Ref = ?
`

// ============================================================================
// DELETE OPERATIONS
// ============================================================================
func (q *Queries) DeleteDocument(ctx context.Context, ref string) error {
	_, err := q.db.ExecContext(ctx, deleteDocument, ref)
	return err
}

const deleteDocumentAttachment = `-- name: DeleteDocumentAttachment :exec
delete from Document_Attachment 
where Document_Ref = ? and Attachment_Index = ?
`

type DeleteDocumentAttachmentParams struct {
	DocumentRef     string
	AttachmentIndex int64
}

func (q *Queries) DeleteDocumentAttachment(ctx context.Context, arg DeleteDocumentAttachmentParams) error {
	_, err := q.db.ExecContext(ctx, deleteDocumentAttachment, arg.DocumentRef, arg.AttachmentIndex)
	return err
}

const deleteDocumentTranslation = `-- name: DeleteDocumentTranslation :exec
delete from Document_Translation 
where Document_Ref = ? and Lang_Ref = ?
`

type DeleteDocumentTranslationParams struct {
	DocumentRef string
	LangRef     string
}

func (q *Queries) DeleteDocumentTranslation(ctx context.Context, arg DeleteDocumentTranslationParams) error {
	_, err := q.db.ExecContext(ctx, deleteDocumentTranslation, arg.DocumentRef, arg.LangRef)
	return err
}

const deleteGeographicalCharacter = `-- name: DeleteGeographicalCharacter :exec
delete from Geographical_Character where Document_Ref = ?
`

func (q *Queries) DeleteGeographicalCharacter(ctx context.Context, documentRef string) error {
	_, err := q.db.ExecContext(ctx, deleteGeographicalCharacter, documentRef)
	return err
}

const deleteGeographicalMap = `-- name: DeleteGeographicalMap :exec
delete from Geographical_Map where Document_Ref = ?
`

func (q *Queries) DeleteGeographicalMap(ctx context.Context, documentRef string) error {
	_, err := q.db.ExecContext(ctx, deleteGeographicalMap, documentRef)
	return err
}

const deleteGeographicalPlace = `-- name: DeleteGeographicalPlace :exec
delete from Geographical_Place where Document_Ref = ?
`

func (q *Queries) DeleteGeographicalPlace(ctx context.Context, documentRef string) error {
	_, err := q.db.ExecContext(ctx, deleteGeographicalPlace, documentRef)
	return err
}

const deleteLang = `-- name: DeleteLang :exec
delete from Lang where Ref = ?
`

func (q *Queries) DeleteLang(ctx context.Context, ref string) error {
	_, err := q.db.ExecContext(ctx, deleteLang, ref)
	return err
}

const deleteMeasurementCharacter = `-- name: DeleteMeasurementCharacter :exec
delete from Measurement_Character where Document_Ref = ?
`

func (q *Queries) DeleteMeasurementCharacter(ctx context.Context, documentRef string) error {
	_, err := q.db.ExecContext(ctx, deleteMeasurementCharacter, documentRef)
	return err
}

const deletePeriodicCharacter = `-- name: DeletePeriodicCharacter :exec
delete from Periodic_Character where Document_Ref = ?
`

func (q *Queries) DeletePeriodicCharacter(ctx context.Context, documentRef string) error {
	_, err := q.db.ExecContext(ctx, deletePeriodicCharacter, documentRef)
	return err
}

const deleteState = `-- name: DeleteState :exec
delete from State where Document_Ref = ?
`

func (q *Queries) DeleteState(ctx context.Context, documentRef string) error {
	_, err := q.db.ExecContext(ctx, deleteState, documentRef)
	return err
}

const deleteTaxon = `-- name: DeleteTaxon :exec
delete from Taxon where Document_Ref = ?
`

func (q *Queries) DeleteTaxon(ctx context.Context, documentRef string) error {
	_, err := q.db.ExecContext(ctx, deleteTaxon, documentRef)
	return err
}

const deleteTaxonBookInfo = `-- name: DeleteTaxonBookInfo :exec
delete from Taxon_Book_Info 
where Taxon_Ref = ? and Book_Ref = ?
`

type DeleteTaxonBookInfoParams struct {
	TaxonRef string
	BookRef  string
}

func (q *Queries) DeleteTaxonBookInfo(ctx context.Context, arg DeleteTaxonBookInfoParams) error {
	_, err := q.db.ExecContext(ctx, deleteTaxonBookInfo, arg.TaxonRef, arg.BookRef)
	return err
}

const deleteTaxonDescription = `-- name: DeleteTaxonDescription :exec
delete from Taxon_Description 
where Taxon_Ref = ? and Description_Ref = ?
`

type DeleteTaxonDescriptionParams struct {
	TaxonRef       string
	DescriptionRef string
}

func (q *Queries) DeleteTaxonDescription(ctx context.Context, arg DeleteTaxonDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, deleteTaxonDescription, arg.TaxonRef, arg.DescriptionRef)
	return err
}

const deleteTaxonMeasurement = `-- name: DeleteTaxonMeasurement :exec
delete from Taxon_Measurement 
where Taxon_Ref = ? and Character_Ref = ?
`

type DeleteTaxonMeasurementParams struct {
	TaxonRef     string
	CharacterRef string
}

func (q *Queries) DeleteTaxonMeasurement(ctx context.Context, arg DeleteTaxonMeasurementParams) error {
	_, err := q.db.ExecContext(ctx, deleteTaxonMeasurement, arg.TaxonRef, arg.CharacterRef)
	return err
}

const deleteTaxonSpecimenLocation = `-- name: DeleteTaxonSpecimenLocation :exec
delete from Taxon_Specimen_Location 
where Taxon_Ref = ? and Specimen_Index = ?
`

type DeleteTaxonSpecimenLocationParams struct {
	TaxonRef      string
	SpecimenIndex int64
}

func (q *Queries) DeleteTaxonSpecimenLocation(ctx context.Context, arg DeleteTaxonSpecimenLocationParams) error {
	_, err := q.db.ExecContext(ctx, deleteTaxonSpecimenLocation, arg.TaxonRef, arg.SpecimenIndex)
	return err
}

const deleteUnit = `-- name: DeleteUnit :exec
delete from Unit where Ref = ?
`

func (q *Queries) DeleteUnit(ctx context.Context, ref string) error {
	_, err := q.db.ExecContext(ctx, deleteUnit, ref)
	return err
}

const insertBook = `-- name: InsertBook :execresult
insert into Book (Document_Ref, ISBN)
    values (?, ?)
`

type InsertBookParams struct {
	DocumentRef string
	Isbn        sql.NullString
}

func (q *Queries) InsertBook(ctx context.Context, arg InsertBookParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertBook, arg.DocumentRef, arg.Isbn)
}

const insertCategoricalCharacter = `-- name: InsertCategoricalCharacter :execresult
insert into Categorical_Character (Document_Ref, Color)
    values (?, ?)
`

type InsertCategoricalCharacterParams struct {
	DocumentRef string
	Color       sql.NullString
}

func (q *Queries) InsertCategoricalCharacter(ctx context.Context, arg InsertCategoricalCharacterParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertCategoricalCharacter, arg.DocumentRef, arg.Color)
}

const insertDescriptorVisibilityInapplicable = `-- name: InsertDescriptorVisibilityInapplicable :execresult
insert into Descriptor_Visibility_Inapplicable (Descriptor_Ref, Inapplicable_Descriptor_Ref)
    values (?, ?)
`

type InsertDescriptorVisibilityInapplicableParams struct {
	DescriptorRef             string
	InapplicableDescriptorRef string
}

func (q *Queries) InsertDescriptorVisibilityInapplicable(ctx context.Context, arg InsertDescriptorVisibilityInapplicableParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertDescriptorVisibilityInapplicable, arg.DescriptorRef, arg.InapplicableDescriptorRef)
}

const insertDescriptorVisibilityRequirement = `-- name: InsertDescriptorVisibilityRequirement :execresult
insert into Descriptor_Visibility_Requirement (Descriptor_Ref, Required_Descriptor_Ref)
    values (?, ?)
`

type InsertDescriptorVisibilityRequirementParams struct {
	DescriptorRef         string
	RequiredDescriptorRef string
}

func (q *Queries) InsertDescriptorVisibilityRequirement(ctx context.Context, arg InsertDescriptorVisibilityRequirementParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertDescriptorVisibilityRequirement, arg.DescriptorRef, arg.RequiredDescriptorRef)
}

const insertDocument = `-- name: InsertDocument :execresult


insert into Document (Ref, Path, Doc_Order, Name, Details)
    values (?, ?, ?, ?, ?)
`

type InsertDocumentParams struct {
	Ref      string
	Path     string
	DocOrder int64
	Name     string
	Details  sql.NullString
}

// ============================================================================
// COMMAND.SQL - Data Modification Operations (INSERT, UPDATE, DELETE)
// ============================================================================
// This file contains all operations that modify data in the dataset database.
// Separated from queries.sql for clarity and maintainability.
// ============================================================================
// INSERT OPERATIONS
// ============================================================================
func (q *Queries) InsertDocument(ctx context.Context, arg InsertDocumentParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertDocument,
		arg.Ref,
		arg.Path,
		arg.DocOrder,
		arg.Name,
		arg.Details,
	)
}

const insertDocumentAttachment = `-- name: InsertDocumentAttachment :execresult
insert into Document_Attachment (
    Document_Ref, 
    Attachment_Index, 
    Source, 
    Path,
    Path_Small,
    Path_Medium,
    Path_Big)
values (?, ?, ?, ?, ?, ?, ?)
`

type InsertDocumentAttachmentParams struct {
	DocumentRef     string
	AttachmentIndex int64
	Source          string
	Path            string
	PathSmall       string
	PathMedium      string
	PathBig         string
}

func (q *Queries) InsertDocumentAttachment(ctx context.Context, arg InsertDocumentAttachmentParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertDocumentAttachment,
		arg.DocumentRef,
		arg.AttachmentIndex,
		arg.Source,
		arg.Path,
		arg.PathSmall,
		arg.PathMedium,
		arg.PathBig,
	)
}

const insertDocumentTranslation = `-- name: InsertDocumentTranslation :execresult
insert into Document_Translation (Document_Ref, Lang_Ref, Name, Details)
    values (?, ?, ?, ?)
`

type InsertDocumentTranslationParams struct {
	DocumentRef string
	LangRef     string
	Name        string
	Details     sql.NullString
}

func (q *Queries) InsertDocumentTranslation(ctx context.Context, arg InsertDocumentTranslationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertDocumentTranslation,
		arg.DocumentRef,
		arg.LangRef,
		arg.Name,
		arg.Details,
	)
}

const insertGeographicalCharacter = `-- name: InsertGeographicalCharacter :execresult
insert into Geographical_Character (Document_Ref, Map_Ref, Color)
    values (?, ?, ?)
`

type InsertGeographicalCharacterParams struct {
	DocumentRef string
	MapRef      string
	Color       sql.NullString
}

func (q *Queries) InsertGeographicalCharacter(ctx context.Context, arg InsertGeographicalCharacterParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertGeographicalCharacter, arg.DocumentRef, arg.MapRef, arg.Color)
}

const insertGeographicalMap = `-- name: InsertGeographicalMap :execresult
insert into Geographical_Map (Document_Ref, Place_Ref, Map_File, Map_File_Feature_Name) 
    values (?, ?, ?, ?)
`

type InsertGeographicalMapParams struct {
	DocumentRef        string
	PlaceRef           string
	MapFile            string
	MapFileFeatureName string
}

func (q *Queries) InsertGeographicalMap(ctx context.Context, arg InsertGeographicalMapParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertGeographicalMap,
		arg.DocumentRef,
		arg.PlaceRef,
		arg.MapFile,
		arg.MapFileFeatureName,
	)
}

const insertGeographicalPlace = `-- name: InsertGeographicalPlace :execresult
insert into Geographical_Place (Document_Ref, Latitude, Longitude, Scale)
    values (?, ?, ?, ?)
`

type InsertGeographicalPlaceParams struct {
	DocumentRef string
	Latitude    float64
	Longitude   float64
	Scale       int64
}

func (q *Queries) InsertGeographicalPlace(ctx context.Context, arg InsertGeographicalPlaceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertGeographicalPlace,
		arg.DocumentRef,
		arg.Latitude,
		arg.Longitude,
		arg.Scale,
	)
}

const insertLang = `-- name: InsertLang :execresult
insert into Lang (Ref, Name)
    values (?, ?)
`

type InsertLangParams struct {
	Ref  string
	Name string
}

func (q *Queries) InsertLang(ctx context.Context, arg InsertLangParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertLang, arg.Ref, arg.Name)
}

const insertMeasurementCharacter = `-- name: InsertMeasurementCharacter :execresult
insert into Measurement_Character (Document_Ref, Color, Unit_Ref)
    values (?, ?, ?)
`

type InsertMeasurementCharacterParams struct {
	DocumentRef string
	Color       sql.NullString
	UnitRef     sql.NullString
}

func (q *Queries) InsertMeasurementCharacter(ctx context.Context, arg InsertMeasurementCharacterParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertMeasurementCharacter, arg.DocumentRef, arg.Color, arg.UnitRef)
}

const insertPeriodicCharacter = `-- name: InsertPeriodicCharacter :execresult
insert into Periodic_Character (Document_Ref, Periodic_Category_Ref, Color)
    values (?, ?, ?)
`

type InsertPeriodicCharacterParams struct {
	DocumentRef         string
	PeriodicCategoryRef string
	Color               sql.NullString
}

func (q *Queries) InsertPeriodicCharacter(ctx context.Context, arg InsertPeriodicCharacterParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertPeriodicCharacter, arg.DocumentRef, arg.PeriodicCategoryRef, arg.Color)
}

const insertState = `-- name: InsertState :execresult
insert into State (Document_Ref, Color)
    values (?, ?)
`

type InsertStateParams struct {
	DocumentRef string
	Color       sql.NullString
}

func (q *Queries) InsertState(ctx context.Context, arg InsertStateParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertState, arg.DocumentRef, arg.Color)
}

const insertTaxon = `-- name: InsertTaxon :execresult
insert into Taxon (
    Document_Ref,
    Author,
    Website,
    Meaning,
    Herbarium_No,
    Herbarium_Picture,
    Fasc,
    Page)
values (?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertTaxonParams struct {
	DocumentRef      string
	Author           string
	Website          sql.NullString
	Meaning          sql.NullString
	HerbariumNo      sql.NullString
	HerbariumPicture sql.NullString
	Fasc             sql.NullInt64
	Page             sql.NullInt64
}

func (q *Queries) InsertTaxon(ctx context.Context, arg InsertTaxonParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertTaxon,
		arg.DocumentRef,
		arg.Author,
		arg.Website,
		arg.Meaning,
		arg.HerbariumNo,
		arg.HerbariumPicture,
		arg.Fasc,
		arg.Page,
	)
}

const insertTaxonBookInfo = `-- name: InsertTaxonBookInfo :execresult
insert into Taxon_Book_Info (Taxon_Ref, Book_Ref, Fasc, Page, Details) 
    values (?, ?, ?, ?, ?)
`

type InsertTaxonBookInfoParams struct {
	TaxonRef string
	BookRef  string
	Fasc     sql.NullInt64
	Page     sql.NullInt64
	Details  sql.NullString
}

func (q *Queries) InsertTaxonBookInfo(ctx context.Context, arg InsertTaxonBookInfoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertTaxonBookInfo,
		arg.TaxonRef,
		arg.BookRef,
		arg.Fasc,
		arg.Page,
		arg.Details,
	)
}

const insertTaxonDescription = `-- name: InsertTaxonDescription :execresult
insert into Taxon_Description (Taxon_Ref, Description_Ref)
    values (?, ?)
`

type InsertTaxonDescriptionParams struct {
	TaxonRef       string
	DescriptionRef string
}

func (q *Queries) InsertTaxonDescription(ctx context.Context, arg InsertTaxonDescriptionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertTaxonDescription, arg.TaxonRef, arg.DescriptionRef)
}

const insertTaxonMeasurement = `-- name: InsertTaxonMeasurement :execresult
insert into Taxon_Measurement (Taxon_Ref, Character_Ref, Minimum, Maximum) 
    values (?, ?, ?, ?)
`

type InsertTaxonMeasurementParams struct {
	TaxonRef     string
	CharacterRef string
	Minimum      sql.NullFloat64
	Maximum      sql.NullFloat64
}

func (q *Queries) InsertTaxonMeasurement(ctx context.Context, arg InsertTaxonMeasurementParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertTaxonMeasurement,
		arg.TaxonRef,
		arg.CharacterRef,
		arg.Minimum,
		arg.Maximum,
	)
}

const insertTaxonSpecimenLocation = `-- name: InsertTaxonSpecimenLocation :execresult
insert into Taxon_Specimen_Location (Taxon_Ref, Specimen_Index, Latitude, Longitude) 
    values (?, ?, ?, ?)
`

type InsertTaxonSpecimenLocationParams struct {
	TaxonRef      string
	SpecimenIndex int64
	Latitude      float64
	Longitude     float64
}

func (q *Queries) InsertTaxonSpecimenLocation(ctx context.Context, arg InsertTaxonSpecimenLocationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertTaxonSpecimenLocation,
		arg.TaxonRef,
		arg.SpecimenIndex,
		arg.Latitude,
		arg.Longitude,
	)
}

const insertUnit = `-- name: InsertUnit :execresult
insert into Unit (Ref, Base_Unit_Ref, To_Base_Unit_Factor)
    values (?, ?, ?)
`

type InsertUnitParams struct {
	Ref              string
	BaseUnitRef      sql.NullString
	ToBaseUnitFactor sql.NullFloat64
}

func (q *Queries) InsertUnit(ctx context.Context, arg InsertUnitParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertUnit, arg.Ref, arg.BaseUnitRef, arg.ToBaseUnitFactor)
}

const updateBook = `-- name: UpdateBook :exec
update Book 
set ISBN = ?
where Document_Ref = ?
`

type UpdateBookParams struct {
	Isbn        sql.NullString
	DocumentRef string
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.ExecContext(ctx, updateBook, arg.Isbn, arg.DocumentRef)
	return err
}

const updateCategoricalCharacter = `-- name: UpdateCategoricalCharacter :exec
update Categorical_Character 
set Color = ?
where Document_Ref = ?
`

type UpdateCategoricalCharacterParams struct {
	Color       sql.NullString
	DocumentRef string
}

func (q *Queries) UpdateCategoricalCharacter(ctx context.Context, arg UpdateCategoricalCharacterParams) error {
	_, err := q.db.ExecContext(ctx, updateCategoricalCharacter, arg.Color, arg.DocumentRef)
	return err
}

const updateDocument = `-- name: UpdateDocument :exec

update Document 
set Name = ?, Details = ?, Doc_Order = ?
where Ref = ?
`

type UpdateDocumentParams struct {
	Name     string
	Details  sql.NullString
	DocOrder int64
	Ref      string
}

// ============================================================================
// UPDATE OPERATIONS
// ============================================================================
func (q *Queries) UpdateDocument(ctx context.Context, arg UpdateDocumentParams) error {
	_, err := q.db.ExecContext(ctx, updateDocument,
		arg.Name,
		arg.Details,
		arg.DocOrder,
		arg.Ref,
	)
	return err
}

const updateDocumentTranslation = `-- name: UpdateDocumentTranslation :exec
update Document_Translation 
set Name = ?, Details = ?
where Document_Ref = ? and Lang_Ref = ?
`

type UpdateDocumentTranslationParams struct {
	Name        string
	Details     sql.NullString
	DocumentRef string
	LangRef     string
}

func (q *Queries) UpdateDocumentTranslation(ctx context.Context, arg UpdateDocumentTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateDocumentTranslation,
		arg.Name,
		arg.Details,
		arg.DocumentRef,
		arg.LangRef,
	)
	return err
}

const updateGeographicalCharacter = `-- name: UpdateGeographicalCharacter :exec
update Geographical_Character 
set Map_Ref = ?, Color = ?
where Document_Ref = ?
`

type UpdateGeographicalCharacterParams struct {
	MapRef      string
	Color       sql.NullString
	DocumentRef string
}

func (q *Queries) UpdateGeographicalCharacter(ctx context.Context, arg UpdateGeographicalCharacterParams) error {
	_, err := q.db.ExecContext(ctx, updateGeographicalCharacter, arg.MapRef, arg.Color, arg.DocumentRef)
	return err
}

const updateGeographicalMap = `-- name: UpdateGeographicalMap :exec
update Geographical_Map 
set Place_Ref = ?, Map_File = ?, Map_File_Feature_Name = ?
where Document_Ref = ?
`

type UpdateGeographicalMapParams struct {
	PlaceRef           string
	MapFile            string
	MapFileFeatureName string
	DocumentRef        string
}

func (q *Queries) UpdateGeographicalMap(ctx context.Context, arg UpdateGeographicalMapParams) error {
	_, err := q.db.ExecContext(ctx, updateGeographicalMap,
		arg.PlaceRef,
		arg.MapFile,
		arg.MapFileFeatureName,
		arg.DocumentRef,
	)
	return err
}

const updateGeographicalPlace = `-- name: UpdateGeographicalPlace :exec
update Geographical_Place 
set Latitude = ?, Longitude = ?, Scale = ?
where Document_Ref = ?
`

type UpdateGeographicalPlaceParams struct {
	Latitude    float64
	Longitude   float64
	Scale       int64
	DocumentRef string
}

func (q *Queries) UpdateGeographicalPlace(ctx context.Context, arg UpdateGeographicalPlaceParams) error {
	_, err := q.db.ExecContext(ctx, updateGeographicalPlace,
		arg.Latitude,
		arg.Longitude,
		arg.Scale,
		arg.DocumentRef,
	)
	return err
}

const updateMeasurementCharacter = `-- name: UpdateMeasurementCharacter :exec
update Measurement_Character 
set Color = ?, Unit_Ref = ?
where Document_Ref = ?
`

type UpdateMeasurementCharacterParams struct {
	Color       sql.NullString
	UnitRef     sql.NullString
	DocumentRef string
}

func (q *Queries) UpdateMeasurementCharacter(ctx context.Context, arg UpdateMeasurementCharacterParams) error {
	_, err := q.db.ExecContext(ctx, updateMeasurementCharacter, arg.Color, arg.UnitRef, arg.DocumentRef)
	return err
}

const updatePeriodicCharacter = `-- name: UpdatePeriodicCharacter :exec
update Periodic_Character 
set Periodic_Category_Ref = ?, Color = ?
where Document_Ref = ?
`

type UpdatePeriodicCharacterParams struct {
	PeriodicCategoryRef string
	Color               sql.NullString
	DocumentRef         string
}

func (q *Queries) UpdatePeriodicCharacter(ctx context.Context, arg UpdatePeriodicCharacterParams) error {
	_, err := q.db.ExecContext(ctx, updatePeriodicCharacter, arg.PeriodicCategoryRef, arg.Color, arg.DocumentRef)
	return err
}

const updateState = `-- name: UpdateState :exec
update State 
set Color = ?
where Document_Ref = ?
`

type UpdateStateParams struct {
	Color       sql.NullString
	DocumentRef string
}

func (q *Queries) UpdateState(ctx context.Context, arg UpdateStateParams) error {
	_, err := q.db.ExecContext(ctx, updateState, arg.Color, arg.DocumentRef)
	return err
}

const updateTaxon = `-- name: UpdateTaxon :exec
update Taxon 
set Author = ?, Website = ?, Meaning = ?, Herbarium_No = ?, 
    Herbarium_Picture = ?, Fasc = ?, Page = ?
where Document_Ref = ?
`

type UpdateTaxonParams struct {
	Author           string
	Website          sql.NullString
	Meaning          sql.NullString
	HerbariumNo      sql.NullString
	HerbariumPicture sql.NullString
	Fasc             sql.NullInt64
	Page             sql.NullInt64
	DocumentRef      string
}

func (q *Queries) UpdateTaxon(ctx context.Context, arg UpdateTaxonParams) error {
	_, err := q.db.ExecContext(ctx, updateTaxon,
		arg.Author,
		arg.Website,
		arg.Meaning,
		arg.HerbariumNo,
		arg.HerbariumPicture,
		arg.Fasc,
		arg.Page,
		arg.DocumentRef,
	)
	return err
}

const updateTaxonMeasurement = `-- name: UpdateTaxonMeasurement :exec
update Taxon_Measurement 
set Minimum = ?, Maximum = ?
where Taxon_Ref = ? and Character_Ref = ?
`

type UpdateTaxonMeasurementParams struct {
	Minimum      sql.NullFloat64
	Maximum      sql.NullFloat64
	TaxonRef     string
	CharacterRef string
}

func (q *Queries) UpdateTaxonMeasurement(ctx context.Context, arg UpdateTaxonMeasurementParams) error {
	_, err := q.db.ExecContext(ctx, updateTaxonMeasurement,
		arg.Minimum,
		arg.Maximum,
		arg.TaxonRef,
		arg.CharacterRef,
	)
	return err
}

const updateUnit = `-- name: UpdateUnit :exec
update Unit 
set Base_Unit_Ref = ?, To_Base_Unit_Factor = ?
where Ref = ?
`

type UpdateUnitParams struct {
	BaseUnitRef      sql.NullString
	ToBaseUnitFactor sql.NullFloat64
	Ref              string
}

func (q *Queries) UpdateUnit(ctx context.Context, arg UpdateUnitParams) error {
	_, err := q.db.ExecContext(ctx, updateUnit, arg.BaseUnitRef, arg.ToBaseUnitFactor, arg.Ref)
	return err
}
