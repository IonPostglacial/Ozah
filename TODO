LIBRARY POLICY: Minimize external dependencies. Backend should use Go standard library and golang.org/x packages only.
Frontend can use small, standalone libraries (JS/CSS files) that work without build tools/npm.

FRONTEND POLICY: Progressive enhancement - app must work (potentially degraded) with JavaScript disabled.
- htmx is our only JavaScript dependency (for AJAX requests, partial updates, hx-boost)
- Use Go templates for pseudo-components (reusable template blocks)
- Use custom elements (web components) for interactive features
- Leverage modern CSS (grid, flexbox, :has(), container queries, etc.) for layout and interactivity
- JavaScript should enhance, not enable - core functionality must work without it
- Forms use POST/GET actions, buttons trigger server-side handlers via action system
- JS/htmx adds polish: client-side validation, dynamic updates, animations, partial page updates, etc.

# Dataset Import API
Currently dataset import exists via /upload form endpoint and CLI commands.
Need proper API endpoints for programmatic access.
- [x] Create API endpoint POST /api/datasets/json for JSON dataset uploads (cookie authentication)
- [x] Create API endpoint POST /api/datasets/csv for CSV dataset uploads (cookie authentication)
- [x] In case of error, instead of a file, both API endpoints should return structured JSON responses with success/error details
- [x] Maintain existing /upload form endpoint for no-JS HTML form submission
- [x] Add API documentation for dataset import endpoints
- [x] Add validation and proper error responses for API calls

# Dataset Export API
Currently dataset export exists via CLI command (hazo exportjson) and /export form endpoint.
Need proper API endpoints for programmatic access following the existing export patterns.
- [ ] Create API endpoint GET /api/datasets/{name}/json for JSON dataset downloads (cookie authentication)
- [ ] Reuse existing export/hazojson.go logic for dataset serialization
- [ ] Return proper JSON content-type headers and structured error responses
- [ ] Implement access control: users can only export datasets they own or have been shared with them
- [ ] Support optional query parameters for export customization (e.g., ?include_pictures=true)
- [ ] Add proper error handling for missing datasets or unauthorized access
- [ ] Maintain existing /export form endpoint for browser downloads
- [ ] Add API documentation for dataset export endpoint
- [ ] Consider adding CSV export API endpoint GET /api/datasets/{name}/csv for consistency

# Import pictures
Picture upload UI exists but backend functionality is incomplete.
Need CLI command, form action endpoint (no JS), and API endpoint.
Following the existing action pattern (see panelActions.go, action/handler.go).

Backend:
- [x] Implement thumbnail generation using Go standard library (image, image/jpeg, image/png packages) - decode, resize, encode
- [x] Store thumbnails in user's private directory with naming convention (e.g., {docRef}_{index}_{size}.jpg)
- [x] Create CLI command to add picture to dataset with thumbnail generation (hazo addpicture -dataset <name> -ref <id> -file <path> [-index <n>])
- [x] Create pictureActions.go following panelActions.go pattern with uploadPicture action
- [x] Add action.NewActionWithFileUpload() helper in action/handler.go to handle multipart/form-data
- [x] Register picture actions in appropriate handler (taxons, characters) using cc.RegisterActions()
- [x] Create picture serving endpoint GET /ds/{dsName}/pictures/{docRef}/{index}?size=small|medium|big
- [x] Implement access control: user can access own pictures + pictures from datasets shared with them
- [x] Create API endpoint POST /api/pictures for programmatic uploads (cookie authentication) with JSON response

Bulk photo download/thumbnail generation:
- [ ] Create CLI command to bulk download/process pictures for a dataset (hazo syncpictures -dataset <name>)
- [ ] For each Document_Attachment record with a Source URL:
  - If image file doesn't exist locally: download from Source URL with per-domain rate limiting
  - If image exists locally but thumbnails are missing: generate thumbnails from local file
  - If both exist: skip (idempotent operation)
- [ ] Use asynchronous/concurrent downloads with worker pool pattern
- [ ] Implement per-domain rate limiting to avoid overwhelming source servers (polite crawling)
- [ ] Log progress and any download/generation failures
- [ ] Support optional flags: -force (redownload/regenerate all), -dry-run (show what would be done)

Frontend (No JavaScript):
- [ ] Update picturebox.html to wrap upload button in a form with method="POST" enctype="multipart/form-data"
- [ ] Add hidden inputs for entity type and ref ID to the form
- [ ] Change upload button to submit type with name="picture-upload" (matching action registration)
- [ ] Add file input with name="picture-file" (styled with CSS if needed)
- [ ] Form will POST to current page URL, action system will handle it via ExecuteActions()
- [ ] After successful upload, page reload will show new picture (following existing pattern)

# Picture Display with Thumbnails
Pictures should use thumbnails of appropriate sizes, not full-size images.
- [ ] Update picture upload to automatically generate thumbnails (small, medium, big) on import
- [ ] Modify picturebox component to request appropriate thumbnail size
- [ ] Use small thumbnails for icon displays and grids
- [ ] Use medium thumbnails for normal detail views
- [ ] Use big thumbnails or original for zoomed/fullscreen view
- [ ] Update picture serving endpoint to serve correct size based on request

# Administration Interface
Need admin interface for user management. Currently no admin capability exists.
- [ ] Add Is_Admin boolean column to Credentials table in app schema
- [ ] Create migration to add Is_Admin column to existing databases
- [ ] Update adduser command to support optional -admin flag
- [ ] Create admin-only middleware to protect admin routes
- [ ] Create admin interface route/handler (e.g., /admin)
- [ ] Build admin user list view showing all users with admin status
- [ ] Add "Add User" functionality in admin interface
- [ ] Add "Delete User" functionality with confirmation
- [ ] Add "Toggle Admin" functionality to grant/revoke admin privileges
- [ ] Add visual indication of admin status in UI

# Microsoft Account Authentication
Support MS account login alongside local authentication.
Note: Implement OAuth2 using Go stdlib (net/http, crypto) and golang.org/x packages if needed. Avoid MSAL.
- [ ] Implement OAuth2 flow for Microsoft login using Go stdlib (net/http for requests, encoding/json for parsing)
- [ ] Use golang.org/x/oauth2 if necessary (acceptable as x-repo), otherwise implement OAuth2 manually
- [ ] Add MS_Account_Id column to Credentials table
- [ ] Create MS_Account_Requests table for pending access requests
- [ ] Create "Login with Microsoft" button on login page
- [ ] Store MS account ID when user authenticates
- [ ] Create pending requests view for admins
- [ ] Allow admins to approve/reject MS account access requests
- [ ] Link approved MS accounts to existing or new user accounts
- [ ] Handle MS account session management and token refresh

# Dataset Editing Capabilities
Currently can only import and visualize datasets, need ability to edit them.
Note: INSERT operations already exist in queries.sql (created for import command) but should be moved to command.sql for consistency.
- [ ] Create command.sql file for edit operations (UPDATE, DELETE for taxons, characters, states, etc.)
- [ ] Move existing INSERT operations from queries.sql to command.sql (InsertDocument, InsertLang, InsertDocumentTranslation, InsertDocumentAttachment, InsertUnit, InsertBook, InsertState, InsertCategoricalCharacter, InsertMeasurementCharacter, InsertPeriodicCharacter, InsertGeographicalPlace, InsertTaxon, InsertTaxonDescription, InsertTaxonMeasurement, etc.)
- [ ] Update sqlc.yaml configuration to include command.sql for code generation
- [ ] Generate Go functions from command.sql using sqlc
- [ ] Create edit mode UI for taxons (add/edit/delete taxons)
- [ ] Create edit mode UI for characters (add/edit/delete characters)
- [ ] Create edit mode UI for states (add/edit/delete states)
- [ ] Create edit mode UI for measurements (add/edit/delete measurements)
- [ ] Add save/cancel functionality with proper error handling
- [ ] Implement validation for edited data
- [ ] Add confirmation dialogs for destructive operations (delete)

# Display Calendars
Calendar data structure exists in imports but no display implementation.
- [ ] Create SQL query to retrieve calendar/periodic data for a taxon
- [ ] Create calendar display component (Go viewmodel + HTML template)
- [ ] Add calendar section to appropriate views (taxons/characters)
- [ ] Style calendar display appropriately

# Display Geographical Data (PRIORITY)
Display geographical characters/states as colored features on a map.
Some characters and states are geographical in nature (e.g., distribution ranges, habitat regions).
Need to display these as GeoJSON shapes/features on a map in taxon state edition/visualization views.
Note: Frontend map library (Leaflet/OpenLayers) is acceptable as it's browser-side. Backend should use Go stdlib only.
- [ ] Choose lightweight frontend map library for displaying GeoJSON shapes (Leaflet recommended - small, no build step)
- [ ] Add map library assets (single JS/CSS files, no npm dependencies)
- [ ] Create map component for geographical characters (Go viewmodel + HTML template/custom component)
- [ ] Create SQL query to retrieve geographical character/state data (GeoJSON) for a taxon
- [ ] Implement map rendering with colored features representing different geographical states
- [ ] Add map to character/state visualization views
- [ ] Add map to character/state editing views with ability to modify GeoJSON shapes
- [ ] Style geographical states with distinct colors on the map
- [ ] Add legend showing which states correspond to which colored regions

# Display Taxon Specimen Locations (Nice to Have)
Display collection/observation locations of taxon specimens on a map.
This is separate from geographical characters - these are point locations where specimens were found.
- [ ] Extend database schema to store specimen location data (lat/lon coordinates)
- [ ] Create SQL query to retrieve specimen locations for a taxon
- [ ] Create specimen map component (can reuse map library from geographical data feature)
- [ ] Display specimen locations as markers/points on map
- [ ] Add popup/tooltip for each specimen showing collection details
- [ ] Add specimen map view to taxon detail pages
- [ ] Consider clustering for many specimens in same area

# Display measurements in Summary
Summary component exists but doesn't show measurements.
- [ ] Create SQL query to retrieve taxon measurements (from Taxon_Measurement table)
- [ ] Extend summary viewmodel to include measurements
- [ ] Update summary.html template to display measurements (min/max ranges, units)
- [ ] Style measurement display appropriately

# Display measurements in Descriptors
Descriptors panel doesn't show measurements.
- [ ] Create/extend SQL query to retrieve measurements alongside categorical descriptors
- [ ] Extend descriptors viewmodel to include measurement data
- [ ] Update descriptors display to show measurement ranges with units
- [ ] Add filtering capability for measurements in descriptor search